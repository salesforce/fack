<div class="w-full">
  <% content_for :title, @assistant.name %>
  <%= render partial: 'shared/breadcrumb', locals: { breadcrumbs: [['Home', root_path], ['Assistants', assistants_path], [@assistant.name, assistant_path(@assistant)]] } %>
  <div class="flex justify-between items-center">
    <div>
      <h2 class="text-3xl font-bold flex items-center">
        <%= @assistant.name %>
        <span class="ml-2 inline-flex"> <%= render partial: 'assistant_badge', locals: { assistant: @assistant } %></span>
      </h2>
      <%= render partial: 'shared/meta_info', locals: { email: @assistant.user ? @assistant.user.email : "admin", created_at: @assistant.created_at, updated_at: @assistant.updated_at } %>
    </div>
    <div class="flex justify-between items-center">
      <% buttons = {} %>
      <% if policy(@assistant).edit? %>
        <% buttons["Edit"] = edit_assistant_path(@assistant) %>
        <% buttons["Clone"] = clone_assistant_path(@assistant) %>
        <% buttons["Users"] = users_assistant_path(@assistant) %>
      <% end %>
      <% buttons["Details"] = "#" %>
      <% if @assistant.slack_channel_name.present? %>
        <% buttons["Slack"] = "#{ENV['SLACK_BASE_URL']}/archives/#{@assistant.slack_channel_name}" %>
      <% end %>
      <%= render partial: 'shared/button_group', locals: { buttons: buttons } %>
    </div>
  </div>
  <div class="mx-auto w-full">
    <div class="">
      <%= render "chats/form", chat: @chat, assistant: @chat.assistant %>
    </div>
  </div>
  
  <!-- Chart Section -->
  <div class="mt-8 bg-white rounded-lg shadow-sm border border-stone-200 p-6">
    <h2 class="text-stone-700 font-light text-2xl mb-4">Chat Activity - Last 30 Days</h2>
    <div class="w-full" style="height: 300px;">
      <canvas id="chatsPerDayChart"></canvas>
    </div>
  </div>
  
  <div>
    <h1 class="text-stone-700 font-light text-3xl mt-6">Recent Chats</h1>
    <%= render "shared/chat_list", chats: @assistant.chats.limit(10).order(created_at: :desc) %>
  </div>
  <div class="mt-4">
    <%= link_to 'View all chats for ' + @assistant.name, assistant_chats_path(@assistant), class:"text-sky-500 rounded-md hover:underline" %>
  </div>
</div>
<div id="details-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white rounded-lg shadow-lg w-2/3 max-h-[90vh] flex flex-col relative">
    <div class="absolute top-0 right-0 p-4">
      <button id="close-modal" class="text-gray-700 text-3xl">&times;</button>
    </div>
    <div class="px-6 py-10 overflow-y-auto max-h-[85vh]">
      <%= render @assistant %>
    </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script>
  document.querySelector('a[href="#"]').addEventListener("click", function(e) {
    e.preventDefault();
    document.getElementById("details-modal").classList.remove("hidden");
  });
  document.getElementById("close-modal").addEventListener("click", function() {
    document.getElementById("details-modal").classList.add("hidden");
  });
  
  // Initialize Chart.js
  function initializeChart() {
    const ctx = document.getElementById('chatsPerDayChart');
    if (!ctx) return;
    
    // Check if Chart.js is loaded, if not wait for it
    if (typeof Chart === 'undefined') {
      // Wait for Chart.js to load
      const checkChart = setInterval(() => {
        if (typeof Chart !== 'undefined') {
          clearInterval(checkChart);
          createChart(ctx);
        }
      }, 100);
      return;
    }
    
    createChart(ctx);
  }
  
  function createChart(ctx) {
    // Destroy existing chart if it exists to prevent duplicates
    if (window.chatsChart) {
      window.chatsChart.destroy();
    }
    
    const chartData = <%= raw @chats_per_day.to_json %>;
    const labels = chartData.map(d => {
      const date = new Date(d.date);
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    });
    const data = chartData.map(d => d.count);
    
    window.chatsChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Chats per Day',
          data: data,
          borderColor: '#0ea5e9',
          backgroundColor: 'rgba(14, 165, 233, 0.1)',
          tension: 0.3,
          fill: true,
          pointRadius: 3,
          pointHoverRadius: 5,
          pointBackgroundColor: '#0ea5e9',
          pointBorderColor: '#fff',
          pointBorderWidth: 2
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            padding: 12,
            titleFont: {
              size: 13
            },
            bodyFont: {
              size: 13
            },
            callbacks: {
              label: function(context) {
                return 'Chats: ' + context.parsed.y;
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1,
              font: {
                size: 11
              }
            },
            grid: {
              color: 'rgba(0, 0, 0, 0.05)'
            }
          },
          x: {
            ticks: {
              maxRotation: 45,
              minRotation: 45,
              font: {
                size: 10
              }
            },
            grid: {
              display: false
            }
          }
        }
      }
    });
  }
  
  // Listen for both DOMContentLoaded and Turbo events
  document.addEventListener('DOMContentLoaded', initializeChart);
  document.addEventListener('turbo:load', initializeChart);
</script>